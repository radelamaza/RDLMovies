{"version":3,"sources":["utils/url.js","utils/checkResponse.js","utils/get/getEpisodes.js","utils/get/getEpisode.js","utils/get/getPersonaje.js","utils/get/getPersonajes.js","utils/get/getQuotes.js","../node_modules/@material-ui/core/esm/TableHead/TableHead.js","views/Episodio/components/Header/Header.js","views/Episodio/components/Results/Results.js","views/Episodio/components/EpisodeInfo/EpisodeInfo.js","views/Episodio/components/Actors/Actors.js","views/Episodio/Episodio.js"],"names":["URL","checkResponse","response","status","alert","window","location","replace","getEpisodes","tv","numero","a","console","log","fetch","method","headers","json","res","getEpisode","id","getPersonaje","name","getPersonajes","number","getQuotes","tablelvl2","variant","TableHead","React","props","ref","classes","className","_props$component","component","Component","other","_objectWithoutProperties","Tablelvl2Context","Provider","value","_extends","clsx","root","role","withStyles","display","makeStyles","useStyles","theme","content","padding","inner","minWidth","nameCell","alignItems","avatar","height","width","marginRight","spacing","actions","justifyContent","Results","episodes","title","rest","Typography","color","gutterBottom","Card","CardHeader","Divider","CardContent","Table","TableRow","TableCell","align","TableBody","map","episode","hover","key","episode_id","Link","RouterLink","to","defaultProps","flexDirection","marginLeft","buttonIcon","UserProfileInfo","style","fontWeight","selected","season","air_date","header","paddingBottom","paddingTop","backgroundColor","colors","grey","manageButton","Actors","actors","titleTypographyProps","List","actor","ListItem","disableGutters","ListItemText","primary","primaryTypographyProps","results","marginTop","members","Episodio","match","history","params","useState","booleano","setBooleano","setEpisode","Promise","all","useEffect","fetchData","Button","onClick","back","Grid","container","item","lg","xl","xs","EpisodeInfo","characters"],"mappings":"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","file":"static/js/6.ac122c5d.chunk.js","sourcesContent":["export const URL = 'https://tarea-1-breaking-bad.herokuapp.com/api';\n//'https://api-alivia-uc.tk'\n//'https://cimduc-app-api.herokuapp.com'\n","import useRouter from 'utils/useRouter';\nimport { useDispatch } from 'react-redux';\n\nexport function checkResponse(response) {\n    if (response.status==429) {\n        alert(\"Se ha excedido el numero maximo de consultas, intente nuevamente mas tarde\")\n        window.location.replace('/home')\n    } else { return true}\n  }\n  \n  export default checkResponse","import { URL } from '../url'\nimport { checkResponse} from \"../checkResponse\";\nexport async function getEpisodes(tv,numero) {\n    console.log('hola')\n    const response = await fetch(`${URL}/episodes?series=${tv}`, {\n        \n        method: 'GET',\n        headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json',\n        }\n    });\n    const res = await response.json();\n    console.log(res)\n    if (checkResponse(response)) {\n        return {response, res};\n        }\n\n\n    \n    \n    \n}","import { URL } from '../url'\nimport { checkResponse} from \"../checkResponse\";\nexport async function getEpisode(id) {\n    console.log('hola')\n    const response = await fetch(`${URL}/episodes/${id}`, {\n        \n        method: 'GET',\n        headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json',\n        }\n    });\n    const res = await response.json();\n    console.log(res)\n    if (checkResponse(response)) {\n        return {response, res};\n        }\n\n\n    \n    \n    \n}","import { URL } from '../url'\nimport { checkResponse} from \"../checkResponse\";\nexport async function getPersonaje(name) {\n    console.log('hola')\n    const response = await fetch(`${URL}/characters?name=${name}`, {\n        \n        method: 'GET',\n        headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json',\n        }\n    });\n    const res = await response.json();\n    console.log(res)\n    if (checkResponse(response)) {\n        return {response, res};\n        }\n\n\n    \n    \n    \n}","import { URL } from '../url'\nimport { checkResponse} from \"../checkResponse\";\nexport async function getPersonajes(name,number) {\n    console.log(number)\n    const response = await fetch(`${URL}/characters?offset=${number}&name=${name}`, {\n        \n        method: 'GET',\n        headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json',\n        }\n    });\n    const res = await response.json();\n    console.log(res)\n    if (checkResponse(response)) {\n        return {response, res};\n        }\n\n\n    \n    \n    \n}","import { URL } from '../url'\nimport { checkResponse} from \"../checkResponse\";\nexport async function getQuotes(name) {\n    console.log('hola')\n    const response = await fetch(`${URL}/quote?author=${name}`, {\n        \n        method: 'GET',\n        headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json',\n        }\n    });\n    const res = await response.json();\n    console.log(res)\n    if (checkResponse(response)) {\n        return {response, res};\n        }\n\n\n    \n    \n    \n}","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport Tablelvl2Context from '../Table/Tablelvl2Context';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    display: 'table-header-group'\n  }\n};\nvar tablelvl2 = {\n  variant: 'head'\n};\nvar defaultComponent = 'thead';\nvar TableHead = /*#__PURE__*/React.forwardRef(function TableHead(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      _props$component = props.component,\n      Component = _props$component === void 0 ? defaultComponent : _props$component,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\", \"component\"]);\n\n  return /*#__PURE__*/React.createElement(Tablelvl2Context.Provider, {\n    value: tablelvl2\n  }, /*#__PURE__*/React.createElement(Component, _extends({\n    className: clsx(classes.root, className),\n    ref: ref,\n    role: Component === defaultComponent ? null : 'rowgroup'\n  }, other)));\n});\nprocess.env.NODE_ENV !== \"production\" ? TableHead.propTypes = {\n  /**\n   * The content of the component, normally `TableRow`.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .elementType\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiTableHead'\n})(TableHead);","import React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/styles';\nimport { Grid, Typography, Button } from '@material-ui/core';\n\nconst useStyles = makeStyles(() => ({\n  root: {}\n}));\n\nconst Header = props => {\n  const { className, ...rest } = props;\n\n  const classes = useStyles();\n  const handleVolverAtras = () => {\n    window.history.back()\n  }\n\n  return (\n    <div\n      {...rest}\n      className={clsx(classes.root, className)}\n    >\n      <Grid\n        alignItems=\"flex-end\"\n        container\n        justify=\"space-between\"\n        spacing={3}\n      >\n        <Grid item>\n          <Typography\n            component=\"h2\"\n            gutterBottom\n            variant=\"overline\"\n          >\n            Management\n          </Typography>\n          <Typography\n            component=\"h1\"\n            variant=\"h3\"\n          >\n            Customers\n          </Typography>\n        </Grid>\n        <Grid item>\n          <Button\n            color=\"primary\"\n            variant=\"contained\"\n            onClick={handleVolverAtras}\n          >\n            Volver Atrás\n          </Button> \n        </Grid>\n      </Grid>\n    </div>\n  );\n};\n\nHeader.propTypes = {\n  className: PropTypes.string\n};\n\nexport default Header;\n","import React, { useState } from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport { makeStyles } from '@material-ui/styles';\nimport {\n  Avatar,\n  Card,\n  CardActions,\n  CardContent,\n  CardHeader,\n  Checkbox,\n  Divider,\n  Button,\n  Link,\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TablePagination,\n  TableRow,\n  Typography\n} from '@material-ui/core';\n\nimport getInitials from 'utils/getInitials';\nimport { ReviewStars, GenericMoreButton, TableEditBar } from 'components';\n\nconst useStyles = makeStyles(theme => ({\n  root: {},\n  content: {\n    padding: 0\n  },\n  inner: {\n    minWidth: 700\n  },\n  nameCell: {\n    display: 'flex',\n    alignItems: 'center'\n  },\n  avatar: {\n    height: 42,\n    width: 42,\n    marginRight: theme.spacing(1)\n  },\n  actions: {\n    padding: theme.spacing(1),\n    justifyContent: 'flex-end'\n  }\n}));\n\nconst Results = props => {\n  const { className, episodes, title, ...rest } = props;\n\n  const classes = useStyles();\n\n\n\n \n\n\n  return (\n    <div\n      {...rest}\n      className={clsx(classes.root, className)}\n    >\n      <Typography\n        color=\"textSecondary\"\n        gutterBottom\n        variant=\"body2\"\n      >\n        \n      </Typography>\n      <Card>\n        <CardHeader\n          title={title}\n        />\n        <Divider />\n        <CardContent className={classes.content}>\n          <PerfectScrollbar>\n            <div className={classes.inner}>\n              <Table>\n                <TableHead>\n                  <TableRow>\n                    \n                    <TableCell align=\"center\">Episodios</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {console.log(episodes)}{\n                  episodes.map(episode => (\n                    <TableRow\n                      hover\n                      key={episode.episode_id}\n                    >\n                      \n                      <TableCell>\n                        <div className={classes.nameCell}>\n                          \n                          <div>\n                            <Link\n                              color=\"inherit\"\n                              component={RouterLink}\n                              to={\"/episodes/\"+episode.episode_id+\"/\"}\n                              variant=\"h6\"\n                            >\n                              {\"E\"+episode.episode+\" \"+episode.title}\n                            </Link>\n                          </div>\n                        </div>\n                      </TableCell>\n                      \n                      \n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </div>\n          </PerfectScrollbar>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n\nResults.propTypes = {\n  className: PropTypes.string,\n  episodes: PropTypes.array.isRequired\n};\n\nResults.defaultProps = {\n  episodes: []\n};\n\nexport default Results;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/styles';\nimport {\n    Card,\n    CardHeader,\n    CardContent,\n    Divider,\n    Table,\n    TableBody,\n    TableRow,\n    TableCell,\n    Typography,\n} from '@material-ui/core';\nimport { useSelector } from 'react-redux';\nconst useStyles = makeStyles((theme) => ({\n    root: {},\n    content: {\n        padding: 0,\n    },\n    actions: {\n        flexDirection: 'column',\n        alignItems: 'flex-start',\n        '& > * + *': {\n            marginLeft: 0,\n        },\n    },\n    buttonIcon: {\n        marginRight: theme.spacing(1),\n    },\n}));\n\nconst UserProfileInfo = (props) => {\n    const { className, episode, ...rest } = props;\n    const classes = useStyles();\n    \n\n    \n\n    \n\n    return (\n        <Card {...rest} className={clsx(classes.root, className)}>\n            <CardHeader title='Información Del Episodio' />\n            <Divider />\n            <CardContent className={classes.content}>\n                <Table>\n                    <TableBody>\n                        <TableRow>\n                            <TableCell>\n                                {' '}\n                                <Typography style={{ fontWeight: 'bold' }}>\n                                    {' '}\n                                    Nombre\n                                </Typography>{' '}\n                            </TableCell>\n                            <TableCell>\n                                <div>{episode.title}</div>\n                            </TableCell>\n                        </TableRow>\n                        <TableRow selected>\n                            <TableCell>\n                                {' '}\n                                <Typography style={{ fontWeight: 'bold' }}>\n                                    {' '}\n                                    Numero\n                                </Typography>{' '}\n                            </TableCell>\n                            <TableCell>\n                                <div>{episode.episode}</div>\n                            </TableCell>\n                        </TableRow>\n                        <TableRow >\n                            <TableCell>\n                                <Typography style={{ fontWeight: 'bold' }}>\n                                    {' '}\n                                    Temporada\n                                </Typography>\n                            </TableCell>\n                            <TableCell>\n                                {episode.season}\n                            </TableCell>\n                        </TableRow>\n                        <TableRow selected>\n                            <TableCell>\n                                <Typography style={{ fontWeight: 'bold' }}>\n                                    {' '}\n                                    Fecha Estreno\n                                </Typography>\n                            </TableCell>\n                            <TableCell>{episode.air_date}</TableCell>\n                        </TableRow>\n                        \n                    </TableBody>\n                </Table>\n            </CardContent>\n        </Card>\n    );\n};\n\nUserProfileInfo.propTypes = {\n    className: PropTypes.string,\n    order: PropTypes.object.isRequired,\n};\n\nexport default UserProfileInfo;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/styles';\nimport { Link as RouterLink } from 'react-router-dom';\nimport {\n  Avatar,\n  Button,\n  Card,\n  Link,\n  CardContent,\n  CardHeader,\n  List,\n  ListItem,\n  ListItemAvatar,\n  ListItemText,\n  colors\n} from '@material-ui/core';\n\nimport getInitials from 'utils/getInitials';\nimport { RecentActorsSharp } from '@material-ui/icons';\n\nconst useStyles = makeStyles(() => ({\n  root: {},\n  header: {\n    paddingBottom: 0\n  },\n  content: {\n    paddingTop: 0\n  },\n  actions: {\n    backgroundColor: colors.grey[50]\n  },\n  manageButton: {\n    width: '100%'\n  }\n}));\n\nconst Actors = props => {\n  const { actors, className, ...rest } = props;\n\n  const classes = useStyles();\n\n  return (\n    <Card\n      {...rest}\n      className={clsx(classes.root, className)}\n    >\n      <CardHeader\n        className={classes.header}\n        title=\"Personajes\"\n        titleTypographyProps={{\n          variant: 'overline'\n        }}\n      />\n      <CardContent className={classes.content}>\n        <List>\n          {actors.map(actor => (\n            <ListItem\n              disableGutters\n            >\n              <Link\n                              color=\"inherit\"\n                              component={RouterLink}\n                              to={\"/personaje/\"+actor.replace(\" \",\"+\")+\"/\"}\n                              variant=\"h6\"\n                            >\n                            \n              \n              <ListItemText\n                primary={actor}\n                primaryTypographyProps={{ variant: 'h6' }}\n              />\n              </Link>\n            </ListItem>\n          ))}\n        </List>\n      </CardContent>\n    </Card>\n  );\n};\n\nActors.propTypes = {\n  className: PropTypes.string,\n  members: PropTypes.array.isRequired\n};\n\nexport default Actors;\n","import React, { useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/styles';\nimport PropTypes from 'prop-types';\nimport { Page, SearchBar } from 'components';\nimport clsx from 'clsx';\nimport { Grid } from '@material-ui/core';\nimport { Header, Actors, EpisodeInfo } from './components';\nimport { getEpisode} from 'utils/get';\nimport { Button } from '@material-ui/core';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    padding: theme.spacing(3)\n  },\n  results: {\n    marginTop: theme.spacing(3)\n  },\n  members: {\n    marginTop: theme.spacing(3)\n  }\n}));\n\nconst Episodio = props => {\n  const { match, history ,className, ...rest} = props;\n  const classes = useStyles();\n  const { id } = match.params;\n  const [booleano, setBooleano] = useState(false);\n  const [episode, setEpisode] = useState();\n  async function fetchData() {\n    console.log('Buscando Episodio')\n    const [episode] = await Promise.all([getEpisode(id)])\n    setEpisode(episode.res)\n\n    return episode\n  }\n  \n  \n  React.useEffect(() => {\n    \n    if (!booleano){\n      fetchData()}\n      setBooleano(true)\n  }, []);\n  \n  const handleVolverAtras = () => {\n    window.history.back()\n  }\n  return (\n    <Page\n      className={classes.root}\n      title={'Prueba'}\n    >\n      <Button\n            color=\"primary\"\n            variant=\"contained\"\n            onClick={handleVolverAtras}\n          >\n            Volver Atrás\n          </Button> \n       \n      <Grid\n      {...rest}\n      className={clsx(classes.root, className)}\n      container\n      spacing={3}\n    >\n      <Grid\n        item\n        lg={8}\n        xl={9}\n        xs={12}\n      >\n      {episode &&\n      <EpisodeInfo\n      className={classes.results}\n        episode={episode[0]}\n      />}\n      </Grid>\n      <Grid\n        item\n        lg={4}\n        xl={3}\n        xs={12}\n      >{episode &&\n        <Actors\n          className={classes.members}\n          actors={episode[0].characters}\n        />}\n      </Grid>\n      </Grid>\n    </Page>\n  );\n};\nEpisodio.propTypes = {\n  history: PropTypes.object.isRequired,\n  match: PropTypes.object.isRequired\n};\n\nexport default Episodio;\n"],"sourceRoot":""}